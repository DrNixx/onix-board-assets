@mixin box-radius {
  border-radius: $box-radius-size;
}
@mixin box-shadow {
  box-shadow: $box-shadow;
}
@mixin box-neat {
  @include box-radius;
  @include box-shadow;
}

@mixin debug-zoom-input {
  #zoom-input {
    display: none;
    @include breakpoint($mq-zoom-enabled) {
      display: block;
      position: fixed;
      bottom: 3px;
      right: 3px;
      width: 10vw;
    }
  }
}

@mixin transition($prop: all, $dur: $transition-duration) {
  transition: $prop $dur;
}

@mixin hoverflow {
  overflow-y: auto;
  @media (hover: hover) {
    overflow: hidden;
    &:hover {
      overflow-y: auto;
    }
  }
}

@mixin hide {
  display: none;
  .blind-mode & {
    display: inherit;
  }
}

@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin crosstable-large {
  .crosstable__users { flex: 7 1 auto; }
}
@mixin crosstable-small {
  .crosstable__users { flex: 1 1 auto; }
}

/* atm only chrome supports min-content, max-content */
@mixin proper-grid {
  @supports (height: max-content) {
    @content;
  }
}

@mixin body-fixed-scroll {
  body {
    /* prevents scroll bar flicker when dragging a piece out */
    overflow-y: scroll;
  }
}

$vp-min-width: 320px !default;
$vp-max-width: 1200px !default;

@mixin fluid-size($prop, $min-size, $max-size, $min-vw: $vp-min-width, $max-vw: $vp-max-width) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-size);
  $u4: unit($max-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      #{$prop}: $min-size;
      @media (min-width: $min-vw) {
        #{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media (min-width: $max-vw) {
        #{$prop}: $max-size;
      }
    }
  }
  @else {
    @error 'fluid-size requires that all values have the same unit';
  }
}
